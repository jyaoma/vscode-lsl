{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "LSL",
	"scopeName": "source.lsl",
	"patterns": [
		{
			"include": "#Preprocessor-rule-enabled"
		},
		{
			"include": "#Preprocessor-rule-disabled"
		},
		{
			"include": "#Preprocessor-rule-conditional"
		},
		{
			"include": "#comments"
		},
		{
			"match": "\\b(break|case|continue|default|state|do|else|for|goto|if|return|switch|while)\\b",
			"name": "keyword.control.lsl"
		},
		{
			"include": "#storage_types"
		},
		{
			"match": "\\bk[A-Z]\\w*\\b",
			"name": "constant.other.variable.mac-classic.lsl"
		},
		{
			"match": "\\bg[A-Z]\\w*\\b",
			"name": "variable.other.readwrite.global.mac-classic.lsl"
		},
		{
			"match": "\\bs[A-Z]\\w*\\b",
			"name": "variable.other.readwrite.static.mac-classic.lsl"
		},
		{
			"match": "\\b(ACTIVE|AGENT|AGENT_ALWAYS_RUN|AGENT_ATTACHMENTS|AGENT_AUTOMATED|AGENT_AUTOPILOT|AGENT_AWAY|AGENT_BUSY|AGENT_BY_LEGACY_NAME|AGENT_BY_USERNAME|AGENT_CROUCHING|AGENT_FLYING|AGENT_IN_AIR|AGENT_LIST_PARCEL|AGENT_LIST_PARCEL_OWNER|AGENT_LIST_REGION|AGENT_MOUSELOOK|AGENT_ON_OBJECT|AGENT_SCRIPTED|AGENT_SITTING|AGENT_TYPING|AGENT_WALKING|ALL_SIDES|ANIM_ON|ATTACH_AVATAR_CENTER|ATTACH_BACK|ATTACH_BELLY|ATTACH_CHEST|ATTACH_CHIN|ATTACH_FACE_JAW|ATTACH_FACE_LEAR|ATTACH_FACE_LEYE|ATTACH_FACE_REAR|ATTACH_FACE_REYE|ATTACH_FACE_TONGUE|ATTACH_GROIN|ATTACH_HEAD|ATTACH_HIND_LFOOT|ATTACH_HIND_RFOOT|ATTACH_HUD_BOTTOM|ATTACH_HUD_BOTTOM_LEFT|ATTACH_HUD_BOTTOM_RIGHT|ATTACH_HUD_CENTER_1|ATTACH_HUD_CENTER_2|ATTACH_HUD_TOP_CENTER|ATTACH_HUD_TOP_LEFT|ATTACH_HUD_TOP_RIGHT|ATTACH_LEAR|ATTACH_LEFT_PEC|ATTACH_LEYE|ATTACH_LFOOT|ATTACH_LHAND|ATTACH_LHAND_RING1|ATTACH_LHIP|ATTACH_LLARM|ATTACH_LLLEG|ATTACH_LSHOULDER|ATTACH_LUARM|ATTACH_LULEG|ATTACH_LWING|ATTACH_MOUTH|ATTACH_NECK|ATTACH_NOSE|ATTACH_PELVIS|ATTACH_REAR|ATTACH_REYE|ATTACH_RFOOT|ATTACH_RHAND|ATTACH_RHAND_RING1|ATTACH_RHIP|ATTACH_RIGHT_PEC|ATTACH_RLARM|ATTACH_RLLEG|ATTACH_RSHOULDER|ATTACH_RUARM|ATTACH_RULEG|ATTACH_RWING|ATTACH_TAIL_BASE|ATTACH_TAIL_TIP|CAMERA_ACTIVE|CAMERA_BEHINDNESS_ANGLE|CAMERA_BEHINDNESS_LAG|CAMERA_DISTANCE|CAMERA_FOCUS|CAMERA_FOCUS_LAG|CAMERA_FOCUS_LOCKED|CAMERA_FOCUS_OFFSET|CAMERA_FOCUS_THRESHOLD|CAMERA_PITCH|CAMERA_POSITION|CAMERA_POSITION_LAG|CAMERA_POSITION_LOCKED|CAMERA_POSITION_THRESHOLD|CHANGED_ALLOWED_DROP|CHANGED_COLOR|CHANGED_INVENTORY|CHANGED_LINK|CHANGED_MEDIA|CHANGED_OWNER|CHANGED_REGION|CHANGED_REGION_START|CHANGED_RENDER_MATERIAL|CHANGED_SCALE|CHANGED_SHAPE|CHANGED_TELEPORT|CHANGED_TEXTURE|CHARACTER_ACCOUNT_FOR_SKIPPED_FRAMES|CHARACTER_AVOIDANCE_MODE|CHARACTER_DESIRED_SPEED|CHARACTER_DESIRED_TURN_SPEED|CHARACTER_LENGTH|CHARACTER_MAX_ACCEL|CHARACTER_MAX_DECEL|CHARACTER_MAX_SPEED|CHARACTER_MAX_TURN_RADIUS|CHARACTER_ORIENTATION|CHARACTER_RADIUS|CHARACTER_STAY_WITHIN_PARCEL|CHARACTER_TYPE|CHARACTER_TYPE_A|CHARACTER_TYPE_B|CHARACTER_TYPE_C|CHARACTER_TYPE_D|CHARACTER_TYPE_NONE|CLICK_ACTION_BUY|CLICK_ACTION_IGNORE|CLICK_ACTION_NONE|CLICK_ACTION_OPEN|CLICK_ACTION_OPEN_MEDIA|CLICK_ACTION_PAY|CLICK_ACTION_PLAY|CLICK_ACTION_SIT|CLICK_ACTION_DISABLED|CLICK_ACTION_TOUCH|CLICK_ACTION_ZOOM|COMBAT_CHANNEL|CONTENT_TYPE_ATOM|CONTENT_TYPE_FORM|CONTENT_TYPE_HTML|CONTENT_TYPE_JSON|CONTENT_TYPE_LLSD|CONTENT_TYPE_RSS|CONTENT_TYPE_TEXT|CONTENT_TYPE_XHTML|CONTENT_TYPE_XML|CONTROL_BACK|CONTROL_DOWN|CONTROL_FWD|CONTROL_LBUTTON|CONTROL_LEFT|CONTROL_ML_LBUTTON|CONTROL_RIGHT|CONTROL_ROT_LEFT|CONTROL_ROT_RIGHT|CONTROL_UP|DATA_BORN|DATA_NAME|DATA_ONLINE|DATA_PAYINFO|DATA_RATING|DATA_SIM_POS|DATA_SIM_RATING|DATA_SIM_STATUS|DEBUG_CHANNEL|DEG_TO_RAD|EOF|ERR_GENERIC|ERR_MALFORMED_PARAMS|ERR_PARCEL_PERMISSIONS|ERR_RUNTIME_PERMISSIONS|ERR_THROTTLED|ESTATE_ACCESS_ALLOWED_AGENT_ADD|ESTATE_ACCESS_ALLOWED_AGENT_REMOVE|ESTATE_ACCESS_ALLOWED_GROUP_ADD|ESTATE_ACCESS_ALLOWED_GROUP_REMOVE|ESTATE_ACCESS_BANNED_AGENT_ADD|ESTATE_ACCESS_BANNED_AGENT_REMOVE|FALSE|FORCE_DIRECT_PATH|GAME_CONTROL_AXIS_LEFTX|GAME_CONTROL_AXIS_LEFTY|GAME_CONTROL_AXIS_RIGHTX|GAME_CONTROL_AXIS_RIGHTY|GAME_CONTROL_AXIS_TRIGGERLEFT|GAME_CONTROL_AXIS_TRIGGERRIGHT|GAME_CONTROL_BUTTON_A|GAME_CONTROL_BUTTON_B|GAME_CONTROL_BUTTON_BACK|GAME_CONTROL_BUTTON_DPAD_DOWN|GAME_CONTROL_BUTTON_DPAD_LEFT|GAME_CONTROL_BUTTON_DPAD_RIGHT|GAME_CONTROL_BUTTON_DPAD_UP|GAME_CONTROL_BUTTON_GUIDE|GAME_CONTROL_BUTTON_LEFTSHOULDER|GAME_CONTROL_BUTTON_LEFTSTICK|GAME_CONTROL_BUTTON_MISC1|GAME_CONTROL_BUTTON_PADDLE1|GAME_CONTROL_BUTTON_PADDLE2|GAME_CONTROL_BUTTON_PADDLE3|GAME_CONTROL_BUTTON_PADDLE4|GAME_CONTROL_BUTTON_RIGHTSHOULDER|GAME_CONTROL_BUTTON_RIGHTSTICK|GAME_CONTROL_BUTTON_START|GAME_CONTROL_BUTTON_TOUCHPAD|GAME_CONTROL_BUTTON_X|GAME_CONTROL_BUTTON_Y|HORIZONTAL|HTTP_ACCEPT|HTTP_BODY_MAXLENGTH|HTTP_BODY_TRUNCATED|HTTP_CUSTOM_HEADER|HTTP_METHOD|HTTP_MIMETYPE|HTTP_PRAGMA_NO_CACHE|HTTP_USER_AGENT|HTTP_VERBOSE_THROTTLE|HTTP_VERIFY_CERT|INVENTORY_ALL|INVENTORY_ANIMATION|INVENTORY_BODYPART|INVENTORY_CLOTHING|INVENTORY_GESTURE|INVENTORY_LANDMARK|INVENTORY_MATERIAL|INVENTORY_NONE|INVENTORY_NOTECARD|INVENTORY_OBJECT|INVENTORY_SCRIPT|INVENTORY_SETTING|INVENTORY_SOUND|INVENTORY_TEXTURE|JSON_APPEND|JSON_ARRAY|JSON_DELETE|JSON_FALSE|JSON_INVALID|JSON_NULL|JSON_NUMBER|JSON_OBJECT|JSON_STRING|JSON_TRUE|KFM_CMD_PAUSE|KFM_CMD_PLAY|KFM_CMD_STOP|KFM_COMMAND|KFM_DATA|KFM_FORWARD|KFM_LOOP|KFM_MODE|KFM_PING_PONG|KFM_REVERSE|KFM_ROTATION|KFM_TRANSLATION|LAND_LEVEL|LAND_LOWER|LAND_NOISE|LAND_RAISE|LAND_REVERT|LAND_SMOOTH|LINK_ALL_CHILDREN|LINK_ALL_OTHERS|LINK_ROOT|LINK_SET|LINK_THIS|LIST_STAT_GEOMETRIC_MEAN|LIST_STAT_MAX|LIST_STAT_MEAN|LIST_STAT_MEDIAN|LIST_STAT_MIN|LIST_STAT_NUM_COUNT|LIST_STAT_RANGE|LIST_STAT_STD_DEV|LIST_STAT_SUM|LIST_STAT_SUM_SQUARES|LlGetGroup|LOOP|MASK_BASE|MASK_EVERYONE|MASK_GROUP|MASK_NEXT|MASK_OWNER|NULL_KEY|OBJECT_ATTACHED_POINT|OBJECT_ATTACHED_SLOTS_AVAILABLE|OBJECT_BODY_SHAPE_TYPE|OBJECT_CHARACTER_TIME|OBJECT_CLICK_ACTION|OBJECT_CREATOR|OBJECT_DESC|OBJECT_GROUP|OBJECT_GROUP_TAG|OBJECT_HOVER_HEIGHT|OBJECT_LAST_OWNER_ID|OBJECT_NAME|OBJECT_OMEGA|OBJECT_OWNER|OBJECT_PATHFINDING_TYPE|OBJECT_PHANTOM|OBJECT_PHYSICS|OBJECT_PHYSICS_COST|OBJECT_POS|OBJECT_PRIM_COUNT|OBJECT_PRIM_EQUIVALENCE|OBJECT_RENDER_WEIGHT|OBJECT_RETURN_PARCEL|OBJECT_RETURN_PARCEL_OWNER|OBJECT_RETURN_REGION|OBJECT_ROOT|OBJECT_ROT|OBJECT_RUNNING_SCRIPT_COUNT|OBJECT_SCRIPT_MEMORY|OBJECT_SCRIPT_TIME|OBJECT_SELECT_COUNT|OBJECT_SERVER_COST|OBJECT_STREAMING_COST|OBJECT_TEMP_ON_REZ|OBJECT_TOTAL_INVENTORY_COUNT|OBJECT_TOTAL_SCRIPT_COUNT|OBJECT_UNKNOWN_DETAIL|OBJECT_VELOCITY|OPT_CHARACTER|OPT_AVATAR|OPT_EXCLUSION_VOLUME|OPT_LEGACY_LINKSET|OPT_MATERIAL_VOLUME|OPT_OTHER|OPT_STATIC_OBSTACLE|OPT_WALKABLE|PARCEL_COUNT_GROUP|PARCEL_COUNT_OTHER|PARCEL_COUNT_OWNER|PARCEL_COUNT_SELECTED|PARCEL_COUNT_TEMP|PARCEL_COUNT_TOTAL|PARCEL_DETAILS_AREA|PARCEL_DETAILS_DESC|PARCEL_DETAILS_FLAGS|PARCEL_DETAILS_GROUP|PARCEL_DETAILS_ID|PARCEL_DETAILS_NAME|PARCEL_DETAILS_OWNER|PARCEL_DETAILS_SEE_AVATARS|PARCEL_FLAG_ALLOW_ALL_OBJECT_ENTRY|PARCEL_FLAG_ALLOW_CREATE_GROUP_OBJECTS|PARCEL_FLAG_ALLOW_CREATE_OBJECTS|PARCEL_FLAG_ALLOW_DAMAGE|PARCEL_FLAG_ALLOW_FLY|PARCEL_FLAG_ALLOW_GROUP_OBJECT_ENTRY|PARCEL_FLAG_ALLOW_GROUP_SCRIPTS|PARCEL_FLAG_ALLOW_LANDMARK|PARCEL_FLAG_ALLOW_SCRIPTS|PARCEL_FLAG_ALLOW_TERRAFORM|PARCEL_FLAG_LOCAL_SOUND_ONLY|PARCEL_FLAG_RESTRICT_PUSHOBJECT|PARCEL_FLAG_USE_ACCESS_GROUP|PARCEL_FLAG_USE_ACCESS_LIST|PARCEL_FLAG_USE_BAN_LIST|PARCEL_FLAG_USE_LAND_PASS_LIST|PARCEL_MEDIA_COMMAND_AGENT|PARCEL_MEDIA_COMMAND_AUTO_ALIGN|PARCEL_MEDIA_COMMAND_DESC|PARCEL_MEDIA_COMMAND_LOOP|PARCEL_MEDIA_COMMAND_LOOP_SET|PARCEL_MEDIA_COMMAND_PAUSE|PARCEL_MEDIA_COMMAND_PLAY|PARCEL_MEDIA_COMMAND_SIZE|PARCEL_MEDIA_COMMAND_STOP|PARCEL_MEDIA_COMMAND_TEXTURE|PARCEL_MEDIA_COMMAND_TIME|PARCEL_MEDIA_COMMAND_TYPE|PARCEL_MEDIA_COMMAND_UNLOAD|PARCEL_MEDIA_COMMAND_URL|PASSIVE|PASS_ALWAYS|PASS_IF_NOT_HANDLED|PASS_NEVER|PATROL_PAUSE_AT_WAYPOINTS|PAYMENT_INFO_ON_FILE|PAYMENT_INFO_USED|PAY_DEFAULT|PAY_HIDE|PERMISSION_ATTACH|PERMISSION_CHANGE_LINKS|PERMISSION_CONTROL_CAMERA|PERMISSION_DEBIT|PERMISSION_OVERRIDE_ANIMATIONS|PERMISSION_RETURN_OBJECTS|PERMISSION_SILENT_ESTATE_MANAGEMENT|PERMISSION_TAKE_CONTROLS|PERMISSION_TELEPORT|PERMISSION_TRACK_CAMERA|PERMISSION_TRIGGER_ANIMATION|PERM_ALL|PERM_COPY|PERM_MODIFY|PERM_MOVE|PERM_TRANSFER|PI|PING_PONG|PI_BY_TWO|PRIM_ALLOW_UNSIT|PRIM_ALPHA_MODE|PRIM_ALPHA_MODE_BLEND|PRIM_ALPHA_MODE_EMISSIVE|PRIM_ALPHA_MODE_MASK|PRIM_ALPHA_MODE_NONE|PRIM_BUMP_BARK|PRIM_BUMP_BLOBS|PRIM_BUMP_BRICKS|PRIM_BUMP_BRIGHT|PRIM_BUMP_CHECKER|PRIM_BUMP_CONCRETE|PRIM_BUMP_DARK|PRIM_BUMP_DISKS|PRIM_BUMP_GRAVEL|PRIM_BUMP_LARGETILE|PRIM_BUMP_NONE|PRIM_BUMP_SHINY|PRIM_BUMP_SIDING|PRIM_BUMP_STONE|PRIM_BUMP_STUCCO|PRIM_BUMP_SUCTION|PRIM_BUMP_TILE|PRIM_BUMP_WEAVE|PRIM_BUMP_WOOD|PRIM_COLOR|PRIM_DESC|PRIM_FLEXIBLE|PRIM_FULLBRIGHT|PRIM_GLOW|PRIM_HOLE_CIRCLE|PRIM_HOLE_DEFAULT|PRIM_HOLE_SQUARE|PRIM_HOLE_TRIANGLE|PRIM_LINK_TARGET|PRIM_MATERIAL|PRIM_MATERIAL_FLESH|PRIM_MATERIAL_GLASS|PRIM_MATERIAL_LIGHT|PRIM_MATERIAL_METAL|PRIM_MATERIAL_PLASTIC|PRIM_MATERIAL_RUBBER|PRIM_MATERIAL_STONE|PRIM_MATERIAL_WOOD|PRIM_MEDIA_ALT_IMAGE_ENABLE|PRIM_MEDIA_AUTO_LOOP|PRIM_MEDIA_AUTO_PLAY|PRIM_MEDIA_AUTO_SCALE|PRIM_MEDIA_AUTO_ZOOM|PRIM_MEDIA_CURRENT_URL|PRIM_MEDIA_FIRST_CLICK_INTERACT|PRIM_MEDIA_HEIGHT_PIXELS|PRIM_MEDIA_HOME_URL|PRIM_MEDIA_PERMS_CONTROL|PRIM_MEDIA_PERMS_INTERACT|PRIM_MEDIA_PERM_ANYONE|PRIM_MEDIA_PERM_GROUP|PRIM_MEDIA_PERM_NONE|PRIM_MEDIA_PERM_OWNER|PRIM_MEDIA_WHITELIST|PRIM_MEDIA_WHITELIST_ENABLE|PRIM_MEDIA_WIDTH_PIXELS|PRIM_NAME|PRIM_NORMAL|PRIM_OMEGA|PRIM_PHANTOM|PRIM_PHYSICS|PRIM_PHYSICS_SHAPE_CONVEX|PRIM_PHYSICS_SHAPE_NONE|PRIM_PHYSICS_SHAPE_PRIM|PRIM_PHYSICS_SHAPE_TYPE|PRIM_POINT_LIGHT|PRIM_POSITION|PRIM_POS_LOCAL|PRIM_PROJECTOR|PRIM_REFLECTION_PROBE|PRIM_REFLECTION_PROBE_BOX|PRIM_REFLECTION_PROBE_DYNAMIC|PRIM_RENDER_MATERIAL|PRIM_ROTATION|PRIM_ROT_LOCAL|PRIM_SCRIPTED_SIT_ONLY|PRIM_SCULPT_FLAG_ANIMESH|PRIM_SCULPT_FLAG_INVERT|PRIM_SCULPT_FLAG_MIRROR|PRIM_SCULPT_TYPE_CYLINDER|PRIM_SCULPT_TYPE_MASK|PRIM_SCULPT_TYPE_MESH|PRIM_SCULPT_TYPE_PLANE|PRIM_SCULPT_TYPE_SPHERE|PRIM_SCULPT_TYPE_TORUS|PRIM_SHINY_HIGH|PRIM_SHINY_LOW|PRIM_SHINY_MEDIUM|PRIM_SHINY_NONE|PRIM_SIT_TARGET|PRIM_SIZE|PRIM_SLICE|PRIM_SPECULAR|PRIM_TEMP_ON_REZ|PRIM_TEXGEN|PRIM_TEXGEN_DEFAULT|PRIM_TEXGEN_PLANAR|PRIM_TEXT|PRIM_TEXTURE|PRIM_TYPE|PRIM_TYPE_BOX|PRIM_TYPE_CYLINDER|PRIM_TYPE_PRISM|PRIM_TYPE_RING|PRIM_TYPE_SCULPT|PRIM_TYPE_SPHERE|PRIM_TYPE_TORUS|PRIM_TYPE_TUBE|PROFILE_NONE|PROFILE_SCRIPT_MEMORY|PUBLIC_CHANNEL|RAD_TO_DEG|RCERR_CAST_TIME_EXCEEDED|RCERR_SIM_PERF_LOW|RCERR_UNKNOWN|RC_DATA_FLAGS|RC_DETECT_PHANTOM|RC_GET_LINK_NUM|RC_GET_NORMAL|RC_GET_ROOT_KEY|RC_MAX_HITS|RC_REJECT_AGENTS|RC_REJECT_LAND|RC_REJECT_NONPHYSICAL|RC_REJECT_PHYSICAL|RC_REJECT_TYPES|REGION_FLAG_ALLOW_DAMAGE|REGION_FLAG_ALLOW_DIRECT_TELEPORT|REGION_FLAG_BLOCK_FLY|REGION_FLAG_BLOCK_TERRAFORM|REGION_FLAG_DISABLE_COLLISIONS|REGION_FLAG_DISABLE_PHYSICS|REGION_FLAG_FIXED_SUN|REGION_FLAG_RESTRICT_PUSHOBJECT|REGION_FLAG_SANDBOX|REMOTE_DATA_CHANNEL|REMOTE_DATA_REPLY|REMOTE_DATA_REQUEST|REVERSE|ROTATE|SCALE|SCRIPTED|SIM_STAT_ACTIVE_SCRIPT_COUNT|SIM_STAT_AGENT_COUNT|SIM_STAT_AGENT_MS|SIM_STAT_AGENT_UPDATES|SIM_STAT_AI_MS|SIM_STAT_ASSET_DOWNLOADS|SIM_STAT_ASSET_UPLOADS|SIM_STAT_CHILD_AGENT_COUNT|SIM_STAT_FRAME_MS|SIM_STAT_IMAGE_MS|SIM_STAT_IO_PUMP_MS|SIM_STAT_NET_MS|SIM_STAT_OTHER_MS|SIM_STAT_PACKETS_IN|SIM_STAT_PACKETS_OUT|SIM_STAT_PCT_CHARS_STEPPED|SIM_STAT_PHYSICS_FPS|SIM_STAT_PHYSICS_MS|SIM_STAT_PHYSICS_OTHER_MS|SIM_STAT_PHYSICS_SHAPE_MS|SIM_STAT_PHYSICS_STEP_MS|SIM_STAT_SCRIPT_EPS|SIM_STAT_SCRIPT_MS|SIM_STAT_SCRIPT_RUN_PCT|SIM_STAT_SLEEP_MS|SIM_STAT_SPARE_MS|SIM_STAT_UNACKED_BYTES|SMOOTH|SQRT2|STATUS_BLOCK_GRAB|STATUS_BLOCK_GRAB_OBJECT|STATUS_BOUNDS_ERROR|STATUS_CAST_SHADOWS|STATUS_DIE_AT_EDGE|STATUS_DIE_AT_NO_ENTRY|STATUS_INTERNAL_ERROR|STATUS_MALFORMED_PARAMS|STATUS_NOT_FOUND|STATUS_NOT_SUPPORTED|STATUS_OK|STATUS_PHANTOM|STATUS_PHYSICS|STATUS_RETURN_AT_EDGE|STATUS_ROTATE_X|STATUS_ROTATE_Y|STATUS_ROTATE_Z|STATUS_SANDBOX|STATUS_TYPE_MISMATCH|STATUS_WHITELIST_FAILED|STRING_TRIM|STRING_TRIM_HEAD|STRING_TRIM_TAIL|TARGETED_EMAIL_OBJECT_OWNER|TEXTURE_DEFAULT|TEXTURE_BLANK|TEXTURE_MEDIA|TEXTURE_PLYWOOD|TEXTURE_TRANSPARENT|TOUCH_INVALID_FACE|TOUCH_INVALID_TEXCOORD|TOUCH_INVALID_VECTOR|TRAVERSAL_TYPE|TRUE|TWO_PI|TYPE_FLOAT|TYPE_INTEGER|TYPE_INVALID|TYPE_KEY|TYPE_ROTATION|TYPE_STRING|TYPE_VECTOR|URL_REQUEST_DENIED|URL_REQUEST_GRANTED|VEHICLE_FLAG_NO_FLY_UP|VEHICLE_ANGULAR_DEFLECTION_EFFICIENCY|VEHICLE_ANGULAR_DEFLECTION_TIMESCALE|VEHICLE_ANGULAR_FRICTION_TIMESCALE|VEHICLE_ANGULAR_MOTOR_DECAY_TIMESCALE|VEHICLE_ANGULAR_MOTOR_DIRECTION|VEHICLE_ANGULAR_MOTOR_TIMESCALE|VEHICLE_BANKING_EFFICIENCY|VEHICLE_BANKING_MIX|VEHICLE_BANKING_TIMESCALE|VEHICLE_BUOYANCY|VEHICLE_FLAG_CAMERA_DECOUPLED|VEHICLE_FLAG_HOVER_GLOBAL_HEIGHT|VEHICLE_FLAG_HOVER_TERRAIN_ONLY|VEHICLE_FLAG_HOVER_UP_ONLY|VEHICLE_FLAG_HOVER_WATER_ONLY|VEHICLE_FLAG_LIMIT_MOTOR_UP|VEHICLE_FLAG_LIMIT_ROLL_ONLY|VEHICLE_FLAG_MOUSELOOK_BANK|VEHICLE_FLAG_MOUSELOOK_STEER|VEHICLE_FLAG_NO_DEFLECTION_UP|VEHICLE_HOVER_EFFICIENCY|VEHICLE_HOVER_HEIGHT|VEHICLE_HOVER_TIMESCALE|VEHICLE_LINEAR_DEFLECTION_EFFICIENCY|VEHICLE_LINEAR_DEFLECTION_TIMESCALE|VEHICLE_LINEAR_FRICTION_TIMESCALE|VEHICLE_LINEAR_MOTOR_DECAY_TIMESCALE|VEHICLE_LINEAR_MOTOR_DIRECTION|VEHICLE_LINEAR_MOTOR_OFFSET|VEHICLE_LINEAR_MOTOR_TIMESCALE|VEHICLE_REFERENCE_FRAME|VEHICLE_TYPE_AIRPLANE|VEHICLE_TYPE_BALLOON|VEHICLE_TYPE_BOAT|VEHICLE_TYPE_CAR|VEHICLE_TYPE_NONE|VEHICLE_TYPE_SLED|VEHICLE_VERTICAL_ATTRACTION_EFFICIENCY|VEHICLE_VERTICAL_ATTRACTION_TIMESCALE|VERTICAL|ZERO_ROTATION|ZERO_VECTOR)\\b",
			"name": "constant.language.lsl"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#operator_overload"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#strings"
		},
		{
			"begin": "^\\s*((#)\\s*(error|warning))\\b\\s*",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.directive.diagnostic.$3.lsl"
				},
				"2": {
					"name": "punctuation.definition.directive.lsl"
				}
			},
			"end": "(?<!\\\\)(?=\\n)",
			"name": "meta.Preprocessor.diagnostic.lsl",
			"patterns": [
				{
					"begin": "\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.lsl"
						}
					},
					"end": "\"|(?<!\\\\)(?=\\s*\\n)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.lsl"
						}
					},
					"name": "string.quoted.double.lsl",
					"patterns": [
						{
							"include": "#line_continuation_character"
						}
					]
				}
			]
		},
		{
			"begin": "(?x)\n^\\s* ((\\#)\\s*define) \\s+\t# define\n((?<id>[a-zA-Z_$][\\w$]*))\t  # macro name\n(?:\n  (\\()\n\t(\n\t  \\s* \\g<id> \\s*\t\t # first argument\n\t  ((,) \\s* \\g<id> \\s*)*  # additional arguments\n\t  (?:\\.\\.\\.)?\t\t\t# varargs ellipsis?\n\t)\n  (\\))\n)?",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.directive.define.lsl"
				},
				"2": {
					"name": "punctuation.definition.directive.lsl"
				},
				"3": {
					"name": "entity.name.function.Preprocessor.lsl"
				},
				"5": {
					"name": "punctuation.definition.parameters.begin.lsl"
				},
				"6": {
					"name": "variable.parameter.Preprocessor.lsl"
				},
				"8": {
					"name": "punctuation.separator.parameters.lsl"
				},
				"9": {
					"name": "punctuation.definition.parameters.end.lsl"
				}
			},
			"end": "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)",
			"patterns": [
				{
					"include": "#Preprocessor-rule-define-line-contents"
				}
			]
		},
		{
			"begin": "^\\s*((#)\\s*(include(?:_next)?|import))\\b\\s*",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.directive.$3.lsl"
				},
				"2": {
					"name": "punctuation.definition.directive.lsl"
				}
			},
			"end": "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)",
			"name": "meta.Preprocessor.include.lsl",
			"patterns": [
				{
					"include": "#line_continuation_character"
				},
				{
					"begin": "\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.lsl"
						}
					},
					"end": "\"",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.lsl"
						}
					},
					"name": "string.quoted.double.include.lsl"
				},
				{
					"begin": "<",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.lsl"
						}
					},
					"end": ">",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.lsl"
						}
					},
					"name": "string.quoted.other.lt-gt.include.lsl"
				}
			]
		},
		{
			"begin": "^\\s*(?:((#)\\s*undef))\\b",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.directive.undef.lsl"
				},
				"2": {
					"name": "punctuation.definition.directive.lsl"
				}
			},
			"end": "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)",
			"name": "meta.Preprocessor.lsl",
			"patterns": [
				{
					"match": "[a-zA-Z_$][\\w$]*",
					"name": "entity.name.function.Preprocessor.lsl"
				},
				{
					"include": "#line_continuation_character"
				}
			]
		},
		{
			"match": "\\b([A-Za-z0-9_]+_t)\\b",
			"name": "support.type.posix-reserved.lsl"
		},
		{
			"include": "#block"
		},
		{
			"include": "#parens"
		},
		{
			"begin": "(?!(?:while|for|do|if|else|goto|switch|catch|return|break|case|continue|default|state|float|integer|key|list|rotation|string|vector|TRUE|FALSE|if|elif|else|endif|ifdef|ifndef|define|undef|include|error|warning)\\s*\\()(?=[a-zA-Z_][a-zA-Z0-9_]*\\s*\\()",
			"end": "(?<=\\))",
			"name": "meta.function.lsl",
			"patterns": [
				{
					"include": "#function-innards"
				}
			]
		},
		{
			"include": "#line_continuation_character"
		},
		{
			"name": "meta.bracket.square.access.lsl",
			"begin": "([a-zA-Z_][a-zA-Z_0-9]*|(?<=[\\]\\)]))?(\\[)(?!\\])",
			"beginCaptures": {
				"1": {
					"name": "variable.object.lsl"
				},
				"2": {
					"name": "punctuation.definition.begin.bracket.square.lsl"
				}
			},
			"end": "\\]",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.end.bracket.square.lsl"
				}
			},
			"patterns": [
				{
					"include": "#function-call-innards"
				}
			]
		},
		{
			"name": "storage.modifier.array.bracket.square.lsl",
			"match": "\\[\\s*\\]"
		},
		{
			"match": ";",
			"name": "punctuation.terminator.statement.lsl"
		},
		{
			"match": ",",
			"name": "punctuation.separator.delimiter.lsl"
		}
	],
	"repository": {
		"probably_a_parameter": {
			"match": "(?:([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?==)|(?<=(?:[a-zA-Z0-9_]\\s|[&*>\\]\\)]))\\s*([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=(?:\\[\\]\\s*)?(?:,|\\))))",
			"captures": {
				"1": {
					"name": "variable.parameter.probably.defaulted.lsl"
				},
				"2": {
					"name": "variable.parameter.probably.lsl"
				}
			}
		},
		"operator_overload": {
			"begin": "((?:[a-zA-Z_][a-zA-Z0-9_]*\\s*(?:<(?:[\\s<>,\\w])*>\\s*)?::)*)(operator)((?:\\s*(?:\\+\\+|\\-\\-|\\(\\)|\\[\\]|\\->|\\+\\+|\\-\\-|\\+|\\-|!|~|\\*|&|\\->\\*|\\*|\\/|%|\\+|\\-|<<|>>|<=>|<|<=|>|>=|==|!=|&|\\^|\\||&&|\\|\\||=|\\+=|\\-=|\\*=|\\/=|%=|<<=|>>=|&=|\\^=|\\|=|,)|\\s+(?:(?:new|new\\[\\]|delete|delete\\[\\])|[a-zA-Z_][a-zA-Z0-9_]*)))\\s*(\\()",
			"beginCaptures": {
				"1": {
					"name": "entity.scope.lsl"
				},
				"2": {
					"name": "entity.name.operator.overload.lsl"
				},
				"3": {
					"name": "entity.name.operator.overloadee.lsl"
				},
				"4": {
					"name": "punctuation.section.parameters.begin.bracket.round.lsl"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.parameters.end.bracket.round.lsl"
				}
			},
			"name": "meta.function.definition.parameters.operator-overload.lsl",
			"patterns": [
				{
					"include": "#probably_a_parameter"
				},
				{
					"include": "#function-innards"
				}
			]
		},
		"access-method": {
			"name": "meta.function-call.member.lsl",
			"begin": "([a-zA-Z_][a-zA-Z_0-9]*|(?<=[\\]\\)]))\\s*(?:(\\.)|(->))((?:(?:[a-zA-Z_][a-zA-Z_0-9]*)\\s*(?:(?:\\.)|(?:->)))*)\\s*([a-zA-Z_][a-zA-Z_0-9]*)(\\()",
			"beginCaptures": {
				"1": {
					"name": "variable.object.lsl"
				},
				"2": {
					"name": "punctuation.separator.dot-access.lsl"
				},
				"3": {
					"name": "punctuation.separator.pointer-access.lsl"
				},
				"4": {
					"patterns": [
						{
							"match": "\\.",
							"name": "punctuation.separator.dot-access.lsl"
						},
						{
							"match": "->",
							"name": "punctuation.separator.pointer-access.lsl"
						},
						{
							"match": "[a-zA-Z_][a-zA-Z_0-9]*",
							"name": "variable.object.lsl"
						},
						{
							"name": "everything.else",
							"match": ".+"
						}
					]
				},
				"5": {
					"name": "entity.name.function.member.lsl"
				},
				"6": {
					"name": "punctuation.section.arguments.begin.bracket.round.function.member.lsl"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.arguments.end.bracket.round.function.member.lsl"
				}
			},
			"patterns": [
				{
					"include": "#function-call-innards"
				}
			]
		},
		"access-member": {
			"name": "variable.object.access.lsl",
			"match": "(?:([a-zA-Z_][a-zA-Z0-9_]*)|(?<=\\]|\\)))\\s*(?:((?:\\.|\\.\\*))|((?:->|->\\*)))\\s*((?:[a-zA-Z_][a-zA-Z0-9_]*\\s*(?:\\.|->)\\s*)*)\\b(?!(?:float|integer|key|list|rotation|string|vector))([a-zA-Z_][a-zA-Z0-9_]*)\\b(?!\\()",
			"captures": {
				"1": {
					"name": "variable.object.lsl"
				},
				"2": {
					"name": "punctuation.separator.dot-access.lsl"
				},
				"3": {
					"name": "punctuation.separator.pointer-access.lsl"
				},
				"4": {
					"patterns": [
						{
							"match": "\\.",
							"name": "punctuation.separator.dot-access.lsl"
						},
						{
							"match": "->",
							"name": "punctuation.separator.pointer-access.lsl"
						},
						{
							"match": "[a-zA-Z_][a-zA-Z0-9_]*",
							"name": "variable.object.lsl"
						},
						{
							"match": ".+",
							"name": "everything.else"
						}
					]
				},
				"5": {
					"name": "variable.other.member.lsl"
				}
			}
		},
		"block": {
			"patterns": [
				{
					"begin": "{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.block.begin.bracket.curly.lsl"
						}
					},
					"end": "}|(?=\\s*#\\s*(?:elif|else|endif)\\b)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.block.end.bracket.curly.lsl"
						}
					},
					"name": "meta.block.lsl",
					"patterns": [
						{
							"include": "#block_innards"
						}
					]
				}
			]
		},
		"block_innards": {
			"patterns": [
				{
					"include": "#Preprocessor-rule-enabled-block"
				},
				{
					"include": "#Preprocessor-rule-disabled-block"
				},
				{
					"include": "#Preprocessor-rule-conditional-block"
				},
				{
					"include": "#access-method"
				},
				{
					"include": "#access-member"
				},
				{
					"include": "#c_function_call"
				},
				{
					"name": "meta.initialization.lsl",
					"begin": "(?x)\n(?:\n  (?:\n\t(?=\\s)(?<!else|new|return)\n\t(?<=\\w) \\s+()  # or word + space before name\n  )\n)\n(\n  (?:[A-Za-z_][A-Za-z0-9_]*+ | :: )++   # actual name\n  |\n  (?:(?<=operator) (?:[-*&<>=+!]+ | \\(\\) | \\[\\]))\n)\n\\s*(\\() # opening bracket",
					"beginCaptures": {
						"1": {
							"name": "variable.other.lsl"
						},
						"2": {
							"name": "punctuation.section.parens.begin.bracket.round.initialization.lsl"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.parens.end.bracket.round.initialization.lsl"
						}
					},
					"patterns": [
						{
							"include": "#function-call-innards"
						}
					]
				},
				{
					"begin": "{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.block.begin.bracket.curly.lsl"
						}
					},
					"end": "}|(?=\\s*#\\s*(?:elif|else|endif)\\b)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.block.end.bracket.curly.lsl"
						}
					},
					"patterns": [
						{
							"include": "#block_innards"
						}
					]
				},
				{
					"include": "#parens-block"
				},
				{
					"include": "$base"
				}
			]
		},
		"c_function_call": {
			"begin": "(?x)\n(?!(?:while|for|do|if|else|switch|catch|return)\\s*\\()\n(?=\n(?:[A-Za-z_][A-Za-z0-9_]*+|::)++\\s*\\(  # actual name\n|\n(?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\\s*\\(\n)",
			"end": "(?<=\\))(?!\\w)",
			"name": "meta.function-call.lsl",
			"patterns": [
				{
					"include": "#function-call-innards"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"captures": {
						"1": {
							"name": "meta.toc-list.banner.block.lsl"
						}
					},
					"match": "^/\\* =(\\s*.*?)\\s*= \\*/$\\n?",
					"name": "comment.block.lsl"
				},
				{
					"begin": "/\\*",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.begin.lsl"
						}
					},
					"end": "\\*/",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.comment.end.lsl"
						}
					},
					"name": "comment.block.lsl"
				},
				{
					"match": "\\*/.*\\n",
					"name": "invalid.illegal.stray-comment-end.lsl"
				},
				{
					"captures": {
						"1": {
							"name": "meta.toc-list.banner.line.lsl"
						}
					},
					"match": "^// =(\\s*.*?)\\s*=\\s*$\\n?",
					"name": "comment.line.banner.cpp"
				},
				{
					"begin": "(^[ \\t]+)?(?=//)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.whitespace.comment.leading.cpp"
						}
					},
					"end": "(?!\\G)",
					"patterns": [
						{
							"begin": "//",
							"beginCaptures": {
								"0": {
									"name": "punctuation.definition.comment.cpp"
								}
							},
							"end": "(?=\\n)",
							"name": "comment.line.double-slash.cpp",
							"patterns": [
								{
									"include": "#line_continuation_character"
								}
							]
						}
					]
				}
			]
		},
		"disabled": {
			"begin": "^\\s*#\\s*if(n?def)?\\b.*$",
			"end": "^\\s*#\\s*endif\\b",
			"patterns": [
				{
					"include": "#disabled"
				}
			]
		},
		"line_continuation_character": {
			"patterns": [
				{
					"match": "(\\\\)\\n",
					"captures": {
						"1": {
							"name": "constant.character.escape.line-continuation.lsl"
						}
					}
				}
			]
		},
		"numbers": {
			"patterns": [
				{
					"match": "\\b((0(x|X)[0-9a-fA-F]([0-9a-fA-F']*[0-9a-fA-F])?)|(0(b|B)[01]([01']*[01])?)|(([0-9]([0-9']*[0-9])?\\.?[0-9]*([0-9']*[0-9])?)|(\\.[0-9]([0-9']*[0-9])?))((e|E)(\\+|-)?[0-9]([0-9']*[0-9])?)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\b",
					"name": "constant.numeric.lsl"
				}
			]
		},
		"parens": {
			"name": "punctuation.section.parens",
			"begin": "\\(",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.parens.begin.bracket.round.lsl"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.parens.end.bracket.round.lsl"
				}
			},
			"patterns": [
				{
					"include": "$base"
				}
			]
		},
		"parens-block": {
			"name": "punctuation.section.parens.block",
			"begin": "\\(",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.parens.begin.bracket.round.lsl"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.parens.end.bracket.round.lsl"
				}
			},
			"patterns": [
				{
					"include": "#block_innards"
				},
				{
					"match": "(?<!:):(?!:)",
					"name": "punctuation.range-based.cpp"
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"match": "(?<![\\w$])(sizeof)(?![\\w$])",
					"name": "keyword.operator.sizeof.lsl"
				},
				{
					"match": "--",
					"name": "keyword.operator.decrement.lsl"
				},
				{
					"match": "\\+\\+",
					"name": "keyword.operator.increment.lsl"
				},
				{
					"match": "%=|\\+=|-=|\\*=|(?<!\\()/=",
					"name": "keyword.operator.assignment.compound.lsl"
				},
				{
					"match": "&=|\\^=|<<=|>>=|\\|=",
					"name": "keyword.operator.assignment.compound.bitwise.lsl"
				},
				{
					"match": "<<|>>",
					"name": "keyword.operator.bitwise.shift.lsl"
				},
				{
					"match": "!=|<=|>=|==|<|>",
					"name": "keyword.operator.comparison.lsl"
				},
				{
					"match": "&&|!|\\|\\|",
					"name": "keyword.operator.logical.lsl"
				},
				{
					"match": "&|\\||\\^|~",
					"name": "keyword.operator.lsl"
				},
				{
					"match": "=",
					"name": "keyword.operator.assignment.lsl"
				},
				{
					"match": "%|\\*|/|-|\\+",
					"name": "keyword.operator.lsl"
				},
				{
					"begin": "\\?",
					"beginCaptures": {
						"0": {
							"name": "keyword.operator.ternary.lsl"
						}
					},
					"end": ":",
					"applyEndPatternLast": true,
					"endCaptures": {
						"0": {
							"name": "keyword.operator.ternary.lsl"
						}
					},
					"patterns": [
						{
							"include": "#access-method"
						},
						{
							"include": "#access-member"
						},
						{
							"include": "#c_function_call"
						},
						{
							"include": "$base"
						}
					]
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"begin": "\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.lsl"
						}
					},
					"end": "\"",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.lsl"
						}
					},
					"name": "string.quoted.double.lsl",
					"patterns": [
						{
							"include": "#string_escaped_char"
						},
						{
							"include": "#string_placeholder"
						},
						{
							"include": "#line_continuation_character"
						}
					]
				}
			]
		},
		"string_escaped_char": {
			"patterns": [
				{
					"match": "(?x)\\\\ (\n\\\\\t\t\t |\n[abefnprtv'\"?]   |\n[0-3]\\d{,2}\t |\n[4-7]\\d?\t\t|\nx[a-fA-F0-9]{,2} |\nu[a-fA-F0-9]{,4} |\nU[a-fA-F0-9]{,8} )",
					"name": "constant.character.escape.lsl"
				},
				{
					"match": "\\\\.",
					"name": "invalid.illegal.unknown-escape.lsl"
				}
			]
		},
		"string_placeholder": {
			"patterns": [
				{
					"match": "(?x) %\n(\\d+\\$)?\t\t\t\t\t\t   # field (argument #)\n[#0\\- +']*\t\t\t\t\t\t  # flags\n[,;:_]?\t\t\t\t\t\t\t  # separator character (AltiVec)\n((-?\\d+)|\\*(-?\\d+\\$)?)?\t\t  # minimum field width\n(\\.((-?\\d+)|\\*(-?\\d+\\$)?)?)?\t# precision\n(hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)? # length modifier\n[diouxXDOUeEfFgGaACcSspn%]\t\t   # conversion type",
					"name": "constant.other.placeholder.lsl"
				},
				{
					"match": "(%)(?!\"\\s*(PRI|SCN))",
					"captures": {
						"1": {
							"name": "invalid.illegal.placeholder.lsl"
						}
					}
				}
			]
		},
		"storage_types": {
			"patterns": [
				{
					"match": "(?<![a-zA-Z0-9_])(float|integer|key|list|rotation|string|vector)\\s+([a-zA-Z_][a-zA-Z0-9_]+)",
					"captures": {
						"1": { "name": "storage.type.built-in.primitive.lsl" },
						"2": { "name": "variable.other.lsl" }
					}
				},
				{
					"match": "(?<![a-zA-Z0-9_])(?:float|integer|key|list|rotation|string|vector)(?![a-zA-Z0-9_])",
					"name": "storage.type.built-in.primitive.lsl"
				}
			]
		},
		"vararg_ellipses": {
			"match": "(?<!\\.)\\.\\.\\.(?!\\.)",
			"name": "punctuation.vararg-ellipses.lsl"
		},
		"Preprocessor-rule-conditional": {
			"patterns": [
				{
					"begin": "^\\s*((#)\\s*if(?:n?def)?\\b)",
					"beginCaptures": {
						"0": {
							"name": "meta.Preprocessor.lsl"
						},
						"1": {
							"name": "keyword.control.directive.conditional.lsl"
						},
						"2": {
							"name": "punctuation.definition.directive.lsl"
						}
					},
					"end": "^\\s*((#)\\s*endif\\b)",
					"endCaptures": {
						"0": {
							"name": "meta.Preprocessor.lsl"
						},
						"1": {
							"name": "keyword.control.directive.conditional.lsl"
						},
						"2": {
							"name": "punctuation.definition.directive.lsl"
						}
					},
					"patterns": [
						{
							"begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
							"end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
							"name": "meta.Preprocessor.lsl",
							"patterns": [
								{
									"include": "#Preprocessor-rule-conditional-line"
								}
							]
						},
						{
							"include": "#Preprocessor-rule-enabled-elif"
						},
						{
							"include": "#Preprocessor-rule-enabled-else"
						},
						{
							"include": "#Preprocessor-rule-disabled-elif"
						},
						{
							"begin": "^\\s*((#)\\s*elif\\b)",
							"beginCaptures": {
								"1": {
									"name": "keyword.control.directive.conditional.lsl"
								},
								"2": {
									"name": "punctuation.definition.directive.lsl"
								}
							},
							"end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
							"name": "meta.Preprocessor.lsl",
							"patterns": [
								{
									"include": "#Preprocessor-rule-conditional-line"
								}
							]
						},
						{
							"include": "$base"
						}
					]
				},
				{
					"match": "^\\s*#\\s*(else|elif|endif)\\b",
					"captures": {
						"0": {
							"name": "invalid.illegal.stray-$1.lsl"
						}
					}
				}
			]
		},
		"Preprocessor-rule-conditional-block": {
			"patterns": [
				{
					"begin": "^\\s*((#)\\s*if(?:n?def)?\\b)",
					"beginCaptures": {
						"0": {
							"name": "meta.Preprocessor.lsl"
						},
						"1": {
							"name": "keyword.control.directive.conditional.lsl"
						},
						"2": {
							"name": "punctuation.definition.directive.lsl"
						}
					},
					"end": "^\\s*((#)\\s*endif\\b)",
					"endCaptures": {
						"0": {
							"name": "meta.Preprocessor.lsl"
						},
						"1": {
							"name": "keyword.control.directive.conditional.lsl"
						},
						"2": {
							"name": "punctuation.definition.directive.lsl"
						}
					},
					"patterns": [
						{
							"begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
							"end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
							"name": "meta.Preprocessor.lsl",
							"patterns": [
								{
									"include": "#Preprocessor-rule-conditional-line"
								}
							]
						},
						{
							"include": "#Preprocessor-rule-enabled-elif-block"
						},
						{
							"include": "#Preprocessor-rule-enabled-else-block"
						},
						{
							"include": "#Preprocessor-rule-disabled-elif"
						},
						{
							"begin": "^\\s*((#)\\s*elif\\b)",
							"beginCaptures": {
								"1": {
									"name": "keyword.control.directive.conditional.lsl"
								},
								"2": {
									"name": "punctuation.definition.directive.lsl"
								}
							},
							"end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
							"name": "meta.Preprocessor.lsl",
							"patterns": [
								{
									"include": "#Preprocessor-rule-conditional-line"
								}
							]
						},
						{
							"include": "#block_innards"
						}
					]
				},
				{
					"match": "^\\s*#\\s*(else|elif|endif)\\b",
					"captures": {
						"0": {
							"name": "invalid.illegal.stray-$1.lsl"
						}
					}
				}
			]
		},
		"Preprocessor-rule-conditional-line": {
			"patterns": [
				{
					"match": "(?:\\bdefined\\b\\s*$)|(?:\\bdefined\\b(?=\\s*\\(*\\s*(?:(?!defined\\b)[a-zA-Z_$][\\w$]*\\b)\\s*\\)*\\s*(?:\\n|//|/\\*|\\?|\\:|&&|\\|\\||\\\\\\s*\\n)))",
					"name": "keyword.control.directive.conditional.lsl"
				},
				{
					"match": "\\bdefined\\b",
					"name": "invalid.illegal.macro-name.lsl"
				},
				{
					"include": "#comments"
				},
				{
					"include": "#strings"
				},
				{
					"include": "#numbers"
				},
				{
					"begin": "\\?",
					"beginCaptures": {
						"0": {
							"name": "keyword.operator.ternary.lsl"
						}
					},
					"end": ":",
					"endCaptures": {
						"0": {
							"name": "keyword.operator.ternary.lsl"
						}
					},
					"patterns": [
						{
							"include": "#Preprocessor-rule-conditional-line"
						}
					]
				},
				{
					"include": "#operators"
				},
				{
					"match": "\\b(TRUE)\\b",
					"name": "constant.language.boolean.true.lsl"
				},
				{
					"match": "\\b(FALSE)\\b",
					"name": "constant.language.boolean.false.lsl"
				},
				{
					"match": "\\b(PUBLIC_CHANNEL|DEBUG_CHANNEL)\\b",
					"name": "constant.language.channel.lsl"
				},
				{
					"match": "[a-zA-Z_$][\\w$]*",
					"name": "entity.name.function.Preprocessor.lsl"
				},
				{
					"include": "#line_continuation_character"
				},
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.parens.begin.bracket.round.lsl"
						}
					},
					"end": "\\)|(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.parens.end.bracket.round.lsl"
						}
					},
					"patterns": [
						{
							"include": "#Preprocessor-rule-conditional-line"
						}
					]
				}
			]
		},
		"Preprocessor-rule-disabled": {
			"patterns": [
				{
					"begin": "^\\s*((#)\\s*if\\b)(?=\\s*\\(*\\b0+\\b\\)*\\s*(?:$|//|/\\*))",
					"beginCaptures": {
						"0": {
							"name": "meta.Preprocessor.lsl"
						},
						"1": {
							"name": "keyword.control.directive.conditional.lsl"
						},
						"2": {
							"name": "punctuation.definition.directive.lsl"
						}
					},
					"end": "^\\s*((#)\\s*endif\\b)",
					"endCaptures": {
						"0": {
							"name": "meta.Preprocessor.lsl"
						},
						"1": {
							"name": "keyword.control.directive.conditional.lsl"
						},
						"2": {
							"name": "punctuation.definition.directive.lsl"
						}
					},
					"patterns": [
						{
							"begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
							"end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?=\\n)",
							"name": "meta.Preprocessor.lsl",
							"patterns": [
								{
									"include": "#Preprocessor-rule-conditional-line"
								}
							]
						},
						{
							"include": "#comments"
						},
						{
							"include": "#Preprocessor-rule-enabled-elif"
						},
						{
							"include": "#Preprocessor-rule-enabled-else"
						},
						{
							"include": "#Preprocessor-rule-disabled-elif"
						},
						{
							"begin": "^\\s*((#)\\s*elif\\b)",
							"beginCaptures": {
								"0": {
									"name": "meta.Preprocessor.lsl"
								},
								"1": {
									"name": "keyword.control.directive.conditional.lsl"
								},
								"2": {
									"name": "punctuation.definition.directive.lsl"
								}
							},
							"end": "(?=^\\s*((#)\\s*(?:elif|else|endif)\\b))",
							"patterns": [
								{
									"begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
									"end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
									"name": "meta.Preprocessor.lsl",
									"patterns": [
										{
											"include": "#Preprocessor-rule-conditional-line"
										}
									]
								},
								{
									"include": "$base"
								}
							]
						},
						{
							"begin": "\\n",
							"end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
							"contentName": "comment.block.Preprocessor.if-branch.lsl",
							"patterns": [
								{
									"include": "#disabled"
								}
							]
						}
					]
				}
			]
		},
		"Preprocessor-rule-disabled-block": {
			"patterns": [
				{
					"begin": "^\\s*((#)\\s*if\\b)(?=\\s*\\(*\\b0+\\b\\)*\\s*(?:$|//|/\\*))",
					"beginCaptures": {
						"0": {
							"name": "meta.Preprocessor.lsl"
						},
						"1": {
							"name": "keyword.control.directive.conditional.lsl"
						},
						"2": {
							"name": "punctuation.definition.directive.lsl"
						}
					},
					"end": "^\\s*((#)\\s*endif\\b)",
					"endCaptures": {
						"0": {
							"name": "meta.Preprocessor.lsl"
						},
						"1": {
							"name": "keyword.control.directive.conditional.lsl"
						},
						"2": {
							"name": "punctuation.definition.directive.lsl"
						}
					},
					"patterns": [
						{
							"begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
							"end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?=\\n)",
							"name": "meta.Preprocessor.lsl",
							"patterns": [
								{
									"include": "#Preprocessor-rule-conditional-line"
								}
							]
						},
						{
							"include": "#comments"
						},
						{
							"include": "#Preprocessor-rule-enabled-elif-block"
						},
						{
							"include": "#Preprocessor-rule-enabled-else-block"
						},
						{
							"include": "#Preprocessor-rule-disabled-elif"
						},
						{
							"begin": "^\\s*((#)\\s*elif\\b)",
							"beginCaptures": {
								"0": {
									"name": "meta.Preprocessor.lsl"
								},
								"1": {
									"name": "keyword.control.directive.conditional.lsl"
								},
								"2": {
									"name": "punctuation.definition.directive.lsl"
								}
							},
							"end": "(?=^\\s*((#)\\s*(?:elif|else|endif)\\b))",
							"patterns": [
								{
									"begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
									"end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
									"name": "meta.Preprocessor.lsl",
									"patterns": [
										{
											"include": "#Preprocessor-rule-conditional-line"
										}
									]
								},
								{
									"include": "#block_innards"
								}
							]
						},
						{
							"begin": "\\n",
							"end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
							"contentName": "comment.block.Preprocessor.if-branch.in-block.lsl",
							"patterns": [
								{
									"include": "#disabled"
								}
							]
						}
					]
				}
			]
		},
		"Preprocessor-rule-disabled-elif": {
			"begin": "^\\s*((#)\\s*elif\\b)(?=\\s*\\(*\\b0+\\b\\)*\\s*(?:$|//|/\\*))",
			"beginCaptures": {
				"0": {
					"name": "meta.Preprocessor.lsl"
				},
				"1": {
					"name": "keyword.control.directive.conditional.lsl"
				},
				"2": {
					"name": "punctuation.definition.directive.lsl"
				}
			},
			"end": "(?=^\\s*((#)\\s*(?:elif|else|endif)\\b))",
			"patterns": [
				{
					"begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
					"end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
					"name": "meta.Preprocessor.lsl",
					"patterns": [
						{
							"include": "#Preprocessor-rule-conditional-line"
						}
					]
				},
				{
					"include": "#comments"
				},
				{
					"begin": "\\n",
					"end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
					"contentName": "comment.block.Preprocessor.elif-branch.lsl",
					"patterns": [
						{
							"include": "#disabled"
						}
					]
				}
			]
		},
		"Preprocessor-rule-enabled": {
			"patterns": [
				{
					"begin": "^\\s*((#)\\s*if\\b)(?=\\s*\\(*\\b0*1\\b\\)*\\s*(?:$|//|/\\*))",
					"beginCaptures": {
						"0": {
							"name": "meta.Preprocessor.lsl"
						},
						"1": {
							"name": "keyword.control.directive.conditional.lsl"
						},
						"2": {
							"name": "punctuation.definition.directive.lsl"
						},
						"3": {
							"name": "constant.numeric.Preprocessor.lsl"
						}
					},
					"end": "^\\s*((#)\\s*endif\\b)",
					"endCaptures": {
						"0": {
							"name": "meta.Preprocessor.lsl"
						},
						"1": {
							"name": "keyword.control.directive.conditional.lsl"
						},
						"2": {
							"name": "punctuation.definition.directive.lsl"
						}
					},
					"patterns": [
						{
							"begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
							"end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?=\\n)",
							"name": "meta.Preprocessor.lsl",
							"patterns": [
								{
									"include": "#Preprocessor-rule-conditional-line"
								}
							]
						},
						{
							"include": "#comments"
						},
						{
							"begin": "^\\s*((#)\\s*else\\b)",
							"beginCaptures": {
								"0": {
									"name": "meta.Preprocessor.lsl"
								},
								"1": {
									"name": "keyword.control.directive.conditional.lsl"
								},
								"2": {
									"name": "punctuation.definition.directive.lsl"
								}
							},
							"end": "(?=^\\s*((#)\\s*endif\\b))",
							"contentName": "comment.block.Preprocessor.else-branch.lsl",
							"patterns": [
								{
									"include": "#disabled"
								}
							]
						},
						{
							"begin": "^\\s*((#)\\s*elif\\b)",
							"beginCaptures": {
								"0": {
									"name": "meta.Preprocessor.lsl"
								},
								"1": {
									"name": "keyword.control.directive.conditional.lsl"
								},
								"2": {
									"name": "punctuation.definition.directive.lsl"
								}
							},
							"end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
							"contentName": "comment.block.Preprocessor.if-branch.lsl",
							"patterns": [
								{
									"include": "#disabled"
								}
							]
						},
						{
							"begin": "\\n",
							"end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
							"patterns": [
								{
									"include": "$base"
								}
							]
						}
					]
				}
			]
		},
		"Preprocessor-rule-enabled-block": {
			"patterns": [
				{
					"begin": "^\\s*((#)\\s*if\\b)(?=\\s*\\(*\\b0*1\\b\\)*\\s*(?:$|//|/\\*))",
					"beginCaptures": {
						"0": {
							"name": "meta.Preprocessor.lsl"
						},
						"1": {
							"name": "keyword.control.directive.conditional.lsl"
						},
						"2": {
							"name": "punctuation.definition.directive.lsl"
						}
					},
					"end": "^\\s*((#)\\s*endif\\b)",
					"endCaptures": {
						"0": {
							"name": "meta.Preprocessor.lsl"
						},
						"1": {
							"name": "keyword.control.directive.conditional.lsl"
						},
						"2": {
							"name": "punctuation.definition.directive.lsl"
						}
					},
					"patterns": [
						{
							"begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
							"end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?=\\n)",
							"name": "meta.Preprocessor.lsl",
							"patterns": [
								{
									"include": "#Preprocessor-rule-conditional-line"
								}
							]
						},
						{
							"include": "#comments"
						},
						{
							"begin": "^\\s*((#)\\s*else\\b)",
							"beginCaptures": {
								"0": {
									"name": "meta.Preprocessor.lsl"
								},
								"1": {
									"name": "keyword.control.directive.conditional.lsl"
								},
								"2": {
									"name": "punctuation.definition.directive.lsl"
								}
							},
							"end": "(?=^\\s*((#)\\s*endif\\b))",
							"contentName": "comment.block.Preprocessor.else-branch.in-block.lsl",
							"patterns": [
								{
									"include": "#disabled"
								}
							]
						},
						{
							"begin": "^\\s*((#)\\s*elif\\b)",
							"beginCaptures": {
								"0": {
									"name": "meta.Preprocessor.lsl"
								},
								"1": {
									"name": "keyword.control.directive.conditional.lsl"
								},
								"2": {
									"name": "punctuation.definition.directive.lsl"
								}
							},
							"end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
							"contentName": "comment.block.Preprocessor.if-branch.in-block.lsl",
							"patterns": [
								{
									"include": "#disabled"
								}
							]
						},
						{
							"begin": "\\n",
							"end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
							"patterns": [
								{
									"include": "#block_innards"
								}
							]
						}
					]
				}
			]
		},
		"Preprocessor-rule-enabled-elif": {
			"begin": "^\\s*((#)\\s*elif\\b)(?=\\s*\\(*\\b0*1\\b\\)*\\s*(?:$|//|/\\*))",
			"beginCaptures": {
				"0": {
					"name": "meta.Preprocessor.lsl"
				},
				"1": {
					"name": "keyword.control.directive.conditional.lsl"
				},
				"2": {
					"name": "punctuation.definition.directive.lsl"
				}
			},
			"end": "(?=^\\s*((#)\\s*endif\\b))",
			"patterns": [
				{
					"begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
					"end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
					"name": "meta.Preprocessor.lsl",
					"patterns": [
						{
							"include": "#Preprocessor-rule-conditional-line"
						}
					]
				},
				{
					"include": "#comments"
				},
				{
					"begin": "\\n",
					"end": "(?=^\\s*((#)\\s*(?:endif)\\b))",
					"patterns": [
						{
							"begin": "^\\s*((#)\\s*(else)\\b)",
							"beginCaptures": {
								"0": {
									"name": "meta.Preprocessor.lsl"
								},
								"1": {
									"name": "keyword.control.directive.conditional.lsl"
								},
								"2": {
									"name": "punctuation.definition.directive.lsl"
								}
							},
							"end": "(?=^\\s*((#)\\s*endif\\b))",
							"contentName": "comment.block.Preprocessor.elif-branch.lsl",
							"patterns": [
								{
									"include": "#disabled"
								}
							]
						},
						{
							"begin": "^\\s*((#)\\s*(elif)\\b)",
							"beginCaptures": {
								"0": {
									"name": "meta.Preprocessor.lsl"
								},
								"1": {
									"name": "keyword.control.directive.conditional.lsl"
								},
								"2": {
									"name": "punctuation.definition.directive.lsl"
								}
							},
							"end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
							"contentName": "comment.block.Preprocessor.elif-branch.lsl",
							"patterns": [
								{
									"include": "#disabled"
								}
							]
						},
						{
							"include": "$base"
						}
					]
				}
			]
		},
		"Preprocessor-rule-enabled-elif-block": {
			"begin": "^\\s*((#)\\s*elif\\b)(?=\\s*\\(*\\b0*1\\b\\)*\\s*(?:$|//|/\\*))",
			"beginCaptures": {
				"0": {
					"name": "meta.Preprocessor.lsl"
				},
				"1": {
					"name": "keyword.control.directive.conditional.lsl"
				},
				"2": {
					"name": "punctuation.definition.directive.lsl"
				}
			},
			"end": "(?=^\\s*((#)\\s*endif\\b))",
			"patterns": [
				{
					"begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
					"end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
					"name": "meta.Preprocessor.lsl",
					"patterns": [
						{
							"include": "#Preprocessor-rule-conditional-line"
						}
					]
				},
				{
					"include": "#comments"
				},
				{
					"begin": "\\n",
					"end": "(?=^\\s*((#)\\s*(?:endif)\\b))",
					"patterns": [
						{
							"begin": "^\\s*((#)\\s*(else)\\b)",
							"beginCaptures": {
								"0": {
									"name": "meta.Preprocessor.lsl"
								},
								"1": {
									"name": "keyword.control.directive.conditional.lsl"
								},
								"2": {
									"name": "punctuation.definition.directive.lsl"
								}
							},
							"end": "(?=^\\s*((#)\\s*endif\\b))",
							"contentName": "comment.block.Preprocessor.elif-branch.in-block.lsl",
							"patterns": [
								{
									"include": "#disabled"
								}
							]
						},
						{
							"begin": "^\\s*((#)\\s*(elif)\\b)",
							"beginCaptures": {
								"0": {
									"name": "meta.Preprocessor.lsl"
								},
								"1": {
									"name": "keyword.control.directive.conditional.lsl"
								},
								"2": {
									"name": "punctuation.definition.directive.lsl"
								}
							},
							"end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
							"contentName": "comment.block.Preprocessor.elif-branch.lsl",
							"patterns": [
								{
									"include": "#disabled"
								}
							]
						},
						{
							"include": "#block_innards"
						}
					]
				}
			]
		},
		"Preprocessor-rule-enabled-else": {
			"begin": "^\\s*((#)\\s*else\\b)",
			"beginCaptures": {
				"0": {
					"name": "meta.Preprocessor.lsl"
				},
				"1": {
					"name": "keyword.control.directive.conditional.lsl"
				},
				"2": {
					"name": "punctuation.definition.directive.lsl"
				}
			},
			"end": "(?=^\\s*((#)\\s*endif\\b))",
			"patterns": [
				{
					"include": "$base"
				}
			]
		},
		"Preprocessor-rule-enabled-else-block": {
			"begin": "^\\s*((#)\\s*else\\b)",
			"beginCaptures": {
				"0": {
					"name": "meta.Preprocessor.lsl"
				},
				"1": {
					"name": "keyword.control.directive.conditional.lsl"
				},
				"2": {
					"name": "punctuation.definition.directive.lsl"
				}
			},
			"end": "(?=^\\s*((#)\\s*endif\\b))",
			"patterns": [
				{
					"include": "#block_innards"
				}
			]
		},
		"Preprocessor-rule-define-line-contents": {
			"patterns": [
				{
					"include": "#vararg_ellipses"
				},
				{
					"begin": "{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.block.begin.bracket.curly.lsl"
						}
					},
					"end": "}|(?=\\s*#\\s*(?:elif|else|endif)\\b)|(?<!\\\\)(?=\\s*\\n)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.block.end.bracket.curly.lsl"
						}
					},
					"name": "meta.block.lsl",
					"patterns": [
						{
							"include": "#Preprocessor-rule-define-line-blocks"
						}
					]
				},
				{
					"match": "\\(",
					"name": "punctuation.section.parens.begin.bracket.round.lsl"
				},
				{
					"match": "\\)",
					"name": "punctuation.section.parens.end.bracket.round.lsl"
				},
				{
					"begin": "(?x)\n(?!(?:while|for|do|if|else|switch|catch|return|float|integer|key|list|rotation|string|vector)\\s*\\()\n(?=\n  (?:[A-Za-z_][A-Za-z0-9_]*+|::)++\\s*\\(  # actual name\n  |\n  (?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\\s*\\(\n)",
					"end": "(?<=\\))(?!\\w)|(?<!\\\\)(?=\\s*\\n)",
					"name": "meta.function.lsl",
					"patterns": [
						{
							"include": "#Preprocessor-rule-define-line-functions"
						}
					]
				},
				{
					"begin": "\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.lsl"
						}
					},
					"end": "\"|(?<!\\\\)(?=\\s*\\n)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.lsl"
						}
					},
					"name": "string.quoted.double.lsl",
					"patterns": [
						{
							"include": "#string_escaped_char"
						},
						{
							"include": "#string_placeholder"
						},
						{
							"include": "#line_continuation_character"
						}
					]
				},
				{
					"include": "#access-method"
				},
				{
					"include": "#access-member"
				},
				{
					"include": "$base"
				}
			]
		},
		"Preprocessor-rule-define-line-blocks": {
			"patterns": [
				{
					"begin": "{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.block.begin.bracket.curly.lsl"
						}
					},
					"end": "}|(?=\\s*#\\s*(?:elif|else|endif)\\b)|(?<!\\\\)(?=\\s*\\n)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.block.end.bracket.curly.lsl"
						}
					},
					"patterns": [
						{
							"include": "#Preprocessor-rule-define-line-blocks"
						},
						{
							"include": "#Preprocessor-rule-define-line-contents"
						}
					]
				},
				{
					"include": "#Preprocessor-rule-define-line-contents"
				}
			]
		},
		"Preprocessor-rule-define-line-functions": {
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#storage_types"
				},
				{
					"include": "#vararg_ellipses"
				},
				{
					"include": "#access-method"
				},
				{
					"include": "#access-member"
				},
				{
					"include": "#operators"
				},
				{
					"begin": "(?x)\n(?!(?:while|for|do|if|else|switch|catch|return)\\s*\\()\n(\n(?:[A-Za-z_][A-Za-z0-9_]*+|::)++  # actual name\n|\n(?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\n)\n\\s*(\\()",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function.lsl"
						},
						"2": {
							"name": "punctuation.section.arguments.begin.bracket.round.lsl"
						}
					},
					"end": "(\\))|(?<!\\\\)(?=\\s*\\n)",
					"endCaptures": {
						"1": {
							"name": "punctuation.section.arguments.end.bracket.round.lsl"
						}
					},
					"patterns": [
						{
							"include": "#Preprocessor-rule-define-line-functions"
						}
					]
				},
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.parens.begin.bracket.round.lsl"
						}
					},
					"end": "(\\))|(?<!\\\\)(?=\\s*\\n)",
					"endCaptures": {
						"1": {
							"name": "punctuation.section.parens.end.bracket.round.lsl"
						}
					},
					"patterns": [
						{
							"include": "#Preprocessor-rule-define-line-functions"
						}
					]
				},
				{
					"include": "#Preprocessor-rule-define-line-contents"
				}
			]
		},
		"function-innards": {
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#storage_types"
				},
				{
					"include": "#operators"
				},
				{
					"include": "#vararg_ellipses"
				},
				{
					"name": "meta.function.definition.parameters",
					"begin": "(?x)\n(?!(?:while|for|do|if|else|switch|catch|return)\\s*\\()\n(\n(?:[A-Za-z_][A-Za-z0-9_]*+|::)++  # actual name\n|\n(?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\n)\n\\s*(\\()",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function.lsl"
						},
						"2": {
							"name": "punctuation.section.parameters.begin.bracket.round.lsl"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.parameters.end.bracket.round.lsl"
						}
					},
					"patterns": [
						{
							"include": "#probably_a_parameter"
						},
						{
							"include": "#function-innards"
						}
					]
				},
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.parens.begin.bracket.round.lsl"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.parens.end.bracket.round.lsl"
						}
					},
					"patterns": [
						{
							"include": "#function-innards"
						}
					]
				},
				{
					"include": "$base"
				}
			]
		},
		"function-call-innards": {
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#storage_types"
				},
				{
					"include": "#access-method"
				},
				{
					"include": "#access-member"
				},
				{
					"include": "#operators"
				},
				{
					"begin": "(?x)\n(?!(?:while|for|do|if|else|switch|catch|return)\\s*\\()\n(\n(?:[A-Za-z_][A-Za-z0-9_]*+|::)++  # actual name\n|\n(?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\n)\n\\s*(\\()",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function.lsl"
						},
						"2": {
							"name": "punctuation.section.arguments.begin.bracket.round.lsl"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.arguments.end.bracket.round.lsl"
						}
					},
					"patterns": [
						{
							"include": "#function-call-innards"
						}
					]
				},
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.parens.begin.bracket.round.lsl"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.parens.end.bracket.round.lsl"
						}
					},
					"patterns": [
						{
							"include": "#function-call-innards"
						}
					]
				},
				{
					"include": "#block_innards"
				}
			]
		}
	}
}